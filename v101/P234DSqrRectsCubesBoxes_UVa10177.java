package v101;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class P234DSqrRectsCubesBoxes_UVa10177 {

	static void hardcode()
	{
		long[][][][] memo;
		memo = new long[101][101][101][101];
		for(int d1 = 1; d1 <= 100; ++d1)
			for(int d2 = 1; d2 <= 100; ++d2)
				for(int d3 = 1; d3 <= 100; ++d3)
					for(int d4 = 1; d4 <= 100; ++d4)
					{
						long ret = d1 * d2 * d3 * d4;
						for(int i = 1; i < 16; ++i)
						{
							int dd1 = (i & 1) == 0 ? d1 : (d1 - 1);
							int dd2 = (i & 2) == 0 ? d2 : (d2 - 1);
							int dd3 = (i & 4) == 0 ? d3 : (d3 - 1);
							int dd4 = (i & 8) == 0 ? d4 : (d4 - 1);
							if((Integer.bitCount(i) & 1) == 1)
								ret += memo[dd1][dd2][dd3][dd4];
							else
								ret -= memo[dd1][dd2][dd3][dd4];
						}
						memo[d1][d2][d3][d4] = ret;
					}
		int N = 0;
		while(N <= 100)
		{
			StringBuilder sb = new StringBuilder();
			for(int i = 2; i <= 4; ++i)
			{
				long ans = 0;
				long tot = memo[N][N][i >= 3 ? N : 1][i == 4 ? N : 1];
				for(int j = 1; j <= N; ++j)
					ans += Math.pow(N - j + 1, i);
				sb.append(i == 2 ? "" : " ").append(ans + " " + (tot-ans));
			}
			System.out.println("\""+sb+"\",");
			N++;
		}
	}
	
	public static void main(String[] args) throws IOException 
	{
		Scanner sc = new Scanner(System.in);
		PrintWriter out = new PrintWriter(System.out);
		
		String[] ans = new String[]
				{
						"0 0 0 0 0 0",
						"1 0 1 0 1 0",
						"5 4 9 18 17 64",
						"14 22 36 180 98 1198",
						"30 70 100 900 354 9646",
						"55 170 225 3150 979 49646",
						"91 350 441 8820 2275 192206",
						"140 644 784 21168 4676 609980",
						"204 1092 1296 45360 8772 1670844",
						"285 1740 2025 89100 15333 4085292",
						"385 2640 3025 163350 25333 9125292",
						"506 3850 4356 283140 39974 18934762",
						"650 5434 6084 468468 60710 36954346",
						"819 7462 8281 745290 89271 68485690",
						"1015 10010 11025 1146600 127687 121422938",
						"1240 13160 14400 1713600 178312 207181688",
						"1496 17000 18496 2496960 243848 341858168",
						"1785 21624 23409 3558168 327369 547653912",
						"2109 27132 29241 4970970 432345 854603736",
						"2470 33630 36100 6822900 562666 1302647334",
						"2870 41230 44100 9216900 722666 1944087334",
						"3311 50050 53361 12273030 917147 2846479174",
						"3795 60214 64009 16130268 1151403 4096000678",
						"4324 71852 76176 20948400 1431244 5801351732",
						"4900 85100 90000 26910000 1763020 8098236980",
						"5525 100100 105625 34222500 2153645 11154486980",
						"6201 117000 123201 43120350 2610621 15175875780",
						"6930 135954 142884 53867268 3142062 20412695394",
						"7714 157122 164836 66758580 3756718 27167150178",
						"8555 180670 189225 82123650 4463999 35801636626",
						"9455 206770 216225 100328400 5273999 46747976626",
						"10416 235600 246016 121777920 6197520 60517674736",
						"11440 267344 278784 146919168 7246096 77713272560",
						"12529 302192 314721 176243760 8432017 99040875824",
						"13685 340340 354025 210290850 9768353 125323932272",
						"14910 381990 396900 249650100 11268978 157518341022",
						"16206 427350 443556 294964740 12948594 196728976542",
						"17575 476634 494209 346934718 14822755 244227712926",
						"19019 530062 549081 406319940 16907891 301473036670",
						"20540 587860 608400 473943600 19221332 370131338668",
						"22140 650260 672400 550695600 21781332 452099978668",
						"23821 717500 741321 637536060 24607093 549532217948",
						"25585 789824 815409 735498918 27718789 664864118492",
						"27434 867482 894916 845695620 31137590 800843509466",
						"29370 950730 980100 969318900 34885686 960561124314",
						"31395 1039830 1071225 1107646650 38986311 1147484014314",
						"33511 1135050 1168561 1262045880 43463767 1365491346954",
						"35720 1236664 1272384 1433976768 48343448 1618912700008",
						"38024 1344952 1382976 1624996800 53651864 1912568964712",
						"40425 1460200 1500625 1836765000 59416665 2251815973960",
						"42925 1582700 1625625 2071046250 65666665 2642590973960",
						"45526 1712750 1758276 2329715700 72431866 3091462060310",
						"48230 1850654 1898884 2614763268 79743482 3605680701974",
						"51039 1996722 2047761 2928298230 87633963 4193237479158",
						"53955 2151270 2205225 3272553900 96137019 4862921163606",
						"56980 2314620 2371600 3649892400 105287644 5624381272356",
						"60116 2487100 2547216 4062809520 115122140 6488194228516",
						"63365 2669044 2732409 4513939668 125678141 7465933265140",
						"66729 2860792 2927521 5006060910 136994637 8570242210804",
						"70210 3062690 3132900 5542100100 149111998 9814913298002",
						"73810 3275090 3348900 6125138100 162071998 11214969138002",
						"77531 3498350 3575881 6758415090 175917839 12786749008322",
						"81375 3732834 3814209 7445335968 190694175 14547999601506",
						"85344 3978912 4064256 8189475840 206447136 16517970386400",
						"89440 4236960 4326400 8994585600 223224352 18717513735648",
						"93665 4507360 4601025 9864597600 241074977 21169189975648",
						"98021 4790500 4888521 10803631410 260049713 23897377517728",
						"102510 5086774 5189284 11815999668 280200834 26928388231822",
						"107134 5396582 5503716 12906214020 301582210 30290588226446",
						"111895 5720330 5832225 14078991150 324249331 34014524201294",
						"116795 6058430 6175225 15339258900 348259331 38133055541294",
						"121836 6411300 6533136 16692162480 373671012 42681492323484",
						"127020 6779364 6906384 18143070768 400544868 47697739410588",
						"132349 7163052 7295401 19697582700 428943109 53222446807692",
						"137825 7562800 7700625 21361533750 458929685 59299166460940",
						"143450 7979050 8122500 23141002500 490570310 65974515679690",
						"149226 8412250 8561476 25042317300 523932486 73298347366090",
						"155155 8862854 9018009 27072063018 559085527 81323927238554",
						"161239 9331322 9492561 29237087880 596100583 90108118238138",
						"167480 9818120 9985600 31544510400 635050664 99711572309336",
						"173880 10323720 10497600 34001726400 676010664 110198929749336",
						"180441 10848600 11029041 36616416120 719057385 121639026322296",
						"187165 11393244 11580409 39396551418 764269561 134105108337720",
						"194054 11958142 12152196 42350403060 811727882 147675055894534",
						"201110 12543790 12744900 45486548100 861515018 162431614494982",
						"208335 13150690 13359025 48813877350 913715643 178462635234982",
						"215731 13779350 13995081 52341602940 968416459 195861323780102",
						"223300 14430284 14653584 56079265968 1025706220 214726498338836",
						"231044 15104012 15335056 60036744240 1085675756 235162856847380",
						"238965 15801060 16040025 64224260100 1148417997 257281253582628",
						"247065 16521960 16769025 68652388350 1214027997 281198985422628",
						"255346 17267250 17522596 73332064260 1282602958 307040087976258",
						"263810 18037474 18301284 78274591668 1354242254 334935641806402",
						"272459 18833182 19105641 83491651170 1429047455 365024088973426",
						"281295 19654930 19936225 88995308400 1507122351 397451560128274",
						"290320 20503280 20793600 94798022400 1588572976 432372212387024",
						"299536 21378800 21678336 100912654080 1673507632 469948578221264",
						"308945 22282064 22591009 107352474768 1762036913 510351925601168",
						"318549 23213652 23532201 114131174850 1854273729 553762629630672",
						"328350 24174150 24502500 121262872500 1950333330 600370555916670",
						"338350 25164150 25502500 128762122500 2050333330 650375455916670"
				};
		
		while(sc.ready())
			out.println(ans[sc.nextInt()]);
		
		out.flush();
		out.close();
	}
	
	static class Scanner 
	{
		StringTokenizer st;
		BufferedReader br;

		public Scanner(InputStream s){	br = new BufferedReader(new InputStreamReader(s));}

		public String next() throws IOException 
		{
			while (st == null || !st.hasMoreTokens()) 
				st = new StringTokenizer(br.readLine());
			return st.nextToken();
		}

		public int nextInt() throws IOException {return Integer.parseInt(next());}

		public long nextLong() throws IOException {return Long.parseLong(next());}

		public String nextLine() throws IOException {return br.readLine();}

		public double nextDouble() throws IOException { return Double.parseDouble(next()); }

		public boolean ready() throws IOException {return br.ready();}
	}
}